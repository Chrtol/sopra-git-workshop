h2. Setup

Some house-cleaning here. We assume of course you have Git installed, (hopefully >= 1.6.0).

First thing to do is to setup your identity. This identifies you to other people who download the project.


<pre><code>
$ git config --global user.name "Your Name"
$ git config --global user.email your.email@example.com
</code></pre>


As a helpful step, you may want to set Git to use your favourite editor


<pre><code>
$ git config --global core.editor emacs
</code></pre>


h2. Start


First, clone this repository:

<pre><code>
$ git clone git://github.com/kuahyeow/git-workshop.git
Initialized empty Git repository in /home/kuahyeow/git-workshop/.git/
remote: Counting objects: 17, done.
remote: Compressing objects: 100% (11/11), done.
remote: Total 17 (delta 4), reused 0 (delta 0)
Receiving objects: 100% (17/17), done.
Resolving deltas: 100% (4/4), done.
$ cd git-workshop
$ ls
</code></pre>


Once you have cloned your repository, you should see your projects files.

You should also see the @.git@ subdirectory. This is where all your repository's data and history is kept

<pre><code>
$ ls -a .git
branches  config  description  HEAD  hooks  info  objects  refs
</code></pre>


h2. Basics

Now, let's try to adding some files into the project. Create a couple of files. For example, I
create two files named @bob.txt@ and @alice.txt@.

In Git, you have to add content to the 'staging area' first by using @git add@
and then finalizing the process to record it into the git index by using @git commit@

We use @git status@ to determine the status of any changes, whether they are untracked, in the staging area, or committed.

<pre><code>
$ git status -s
?? alice.txt
?? bob.txt
</code></pre>


Now to add the files to the staging area

<pre><code>
$ git add alice.txt bob.txt
</code></pre>


Try running @git status -s@ again to see what's changed.

<pre><code>
$ git status -s
A  alice.txt
A  bob.txt
</code></pre>


You are now ready to commit. The @-m@ flag allows you to enter a message to go with the commit at the same time. 

<pre><code>
$ git commit -m "I am adding two new files"
[master 4e7c6cf] I am adding two new files
 2 files changed, 2 insertions(+), 0 deletions(-)
</code></pre>


On a final note, if you try @git status@ now you will see the following:

<pre><code>
$ git status
On branch master
nothing to commit (working directory clean) 
</code></pre>

You should always aim for this state.

h2. Basics (II)

If you have changed your mind, or wish to organize your commits or staging area differently, Git allows you to do that.

Say, you edited @gamow.txt@ and added it to the staging area, and then do not wish to proceed. Here's how to undo adding files to the staging area.

<pre><code>
$ git status -s
 M gamow.txt 
$ git add gamow.txt
$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	modified:   gamow.txt
#
$ git reset HEAD gamow.txt
Unstaged changes after reset:
M	gamow.txt
</code></pre>


Say, you now realise you do not want your changes now at all, and wish to revert back to the file back before when you started editing it.
This happens a lot especially when dealing with complicated code. Fortunately, the command to check for status actually tells you how to do it.

<pre><code>
$ git status
# On branch master
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   gamow.txt
#
$ git checkout -- gamow.txt
</code></pre>


You have now un-done your changes.


h2. Branching and merging

Creating a branch in Git is easy. The @git branch@ command, used by itself will list the branches you currently have

<pre><code>
$ git branch
* master
</code></pre>

The @*@ should indicate the current branch you are on, which is @master@.


If you wish to start another branch:

<pre><code>
$ git branch exp1
$ git branch
  exp1
* master
</code></pre>

The new branch is now created. Now let's work in that branch. To switch to the new branch:

<pre><code>
$ git checkout exp1
Switched to branch 'exp1'
</code></pre>


@git checkout (branch)@ is used to switch branches. Let's perform some commits now,

<pre><code>
$ echo 'some content' > test.txt
$ git add test.txt
$ git commit -m "Added experimental txt"
[exp1 1520634] Added experimental txt
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 test.txt
</code></pre>

Now, let's compare them to the master branch

<pre><code>
$ ls
gamow.txt  README.textile  test.txt
$ git checkout master
Switched to branch 'master'
$ ls
gamow.txt  README.textile
</code></pre>


As you can see the new file you created in the other branch has dissappeared. Not to worry, they are safely tucked away, 
and will re-appear when you switch back to that branch.


We now try out merging. Eventually you will want to merge two branches together after the conclusion of work. 
@git merge@ allows you to do that. To merge the @exp1@ branch into @master@

<pre><code>
$ git merge exp1
Merge made by recursive.
 test.txt |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 test.txt
</code></pre>

You always specify the branch you want to merge from, and you have to be in the branch you want merge into.

At this point, you can also try out @gitk@ to visualize the changes and various branches

Git is pretty good at merging automagically, even when the same file is edited. There are however, 
some situations where the same line of code is edited there is no way a computer can figure out how to merge.

h2. Merge Conflicts



